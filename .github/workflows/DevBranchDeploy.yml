name: Deploy to Test Server

# Needed to make work
# Secrets:
# - SERVER_IP
# - SERVER_USER
# - SERVER_PASSWORD

# - SERVER_BUILD_DIR // Directory we have the running bot in
# - SERVER_COMMAND // Command to call after the files have been moved on the VPS

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: ${{ github.workspace }}/DiscordBot/bin/Release/netcoreapp3.1/

  upload:
    name: Upload to Server
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: dev

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: Copy build to server
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ${{ github.workspace }}/dist
        remote: ${{ secrets.SERVER_BUILD_DIR }}
        host: ${{ secrets.SERVER_IP }}
        port: ${{ secrets.SERVER_PORT }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}

# If we want to zip the build prior
#    - name: Zip Build
#      uses: thedoctor0/zip-release@master
#      with:
#        filename: 'build.zip'
#        directory: DiscordBot/bin/Release/netcoreapp3.1/

# If we zip the bot, we can also do build action artifacts for the summary.
#    - name: Upload Artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: Latest-Build
#        path: ${{ github.workspace }}/DiscordBot/bin/Release/netcoreapp3.1/build.zip

  restart:
    name: Restart Bot
    needs: restart
    runs-on: ubuntu-latest

    environment:
      name: dev

    steps:
    - name: Run commands in SSH
      uses: appleboy/ssh-action@master
      with:
        script: |
          export NVM_DIR=~/.nvm
          source ~/.nvm/nvm.sh
          chmod +x ${{ secrets.SERVER_BUILD_DIR }}DiscordBot
          ${{ secrets.SERVER_COMMAND }}
        host: ${{ secrets.SERVER_IP }}
        port: ${{ secrets.SERVER_PORT }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
